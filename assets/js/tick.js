// Generated by CoffeeScript 1.10.0
(function() {
  var $, Tick, Tick_Flip, Tick_Scroll,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  $ = jQuery;

  $.fn.ticker = function(options) {
    var el, j, len, results;
    if (typeof String.prototype.trim === 'function') {
      results = [];
      for (j = 0, len = this.length; j < len; j++) {
        el = this[j];
        el = $(el);
        if (el.hasClass('tick-flip')) {
          results.push(new Tick_Flip($(el), options));
        } else if (el.hasClass('tick-scroll')) {
          results.push(new Tick_Scroll($(el), options));
        } else {
          results.push(new Tick(el, options));
        }
      }
      return results;
    }
  };


  /*
  
    The acutal Ticker logic. The stored value is
    represented by a span/element per digit (and separator).
  
    Attributes
  
      options     object    all runtime options
      element     object    the element that is used for this ticker
      value       int       whatever value you pass in to the ticker
      separators  array     a list of the all separators that were found inbetween all digits
                            all digits are represented by an empty element
      running     boolean   indicates whether the ticker has been started
      increment   function  callback used to update @value on every tick
  
    Options
  
      incremental   mixed     can be either a fixed numeric value that gets added to the base value on each tick or
                              a function that gets called with the current value and must return the updated number
      delay (ms)    int       the time after which the target value is being increased
      separators    boolean   if true, all arbitrary characters inbetween digits are wrapped in seperated elements
                              if false, these characters are stripped out
      autostart     boolean   whether or not to start the ticker when instantiated
  
    Events
  
      onStart
      onTick
      onStop
   */

  Tick = (function() {
    function Tick(element, options) {
      this.element = element;
      if (options == null) {
        options = {};
      }
      this.running = false;
      this.options = {
        delay: options.delay || 1000,
        separators: options.separators != null ? options.separators : false,
        autostart: options.autostart != null ? options.autostart : true
      };
      this.increment = this.build_increment_callback(options.incremental);
      this.value = Number(this.element.html().replace(/[^\d.]/g, ''));
      this.separators = this.element.html().trim().split(/[\d]/i);
      this.element.addClass('tick-active');
      if (this.options.autostart) {
        this.start();
      }
    }

    Tick.prototype.build_increment_callback = function(option) {
      if ((option != null) && {}.toString.call(option) === '[object Function]') {
        return option;
      } else if (typeof option === 'number') {
        return function(val) {
          return val + option;
        };
      } else {
        return function(val) {
          return val + 1;
        };
      }
    };

    Tick.prototype.render = function() {
      var container, containers, digits, i, j, l, len, m, ref, ref1, ref2, results;
      digits = String(this.value).split('');
      containers = this.element.children(':not(.tick-separator)');
      if (digits.length > containers.length) {
        for (i = j = 0, ref = digits.length - containers.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          if (this.options.separators && this.separators[i]) {
            this.build_separator(this.separators[i]);
          }
          containers.push(this.build_container(i));
        }
      } else if (digits.length < containers.length) {
        for (i = l = ref1 = digits.length, ref2 = containers.length; ref1 <= ref2 ? l < ref2 : l > ref2; i = ref1 <= ref2 ? ++l : --l) {
          containers.last().remove();
        }
      }
      results = [];
      for (i = m = 0, len = containers.length; m < len; i = ++m) {
        container = containers[i];
        results.push(this.update_container(container, digits[i]));
      }
      return results;
    };


    /*
      These methods will create all visible elements and manipulate the output
     */

    Tick.prototype.build_container = function(i) {
      return $('<span></span>').appendTo(this.element);
    };

    Tick.prototype.build_separator = function(content) {
      return $("<span class='tick-separator'>" + content + "</span>").appendTo(this.element);
    };

    Tick.prototype.update_container = function(container, digit) {
      return $(container).html(digit);
    };

    Tick.prototype.refresh_delay = function(new_delay) {
      clearTimeout(this.timer);
      this.options.delay = new_delay;
      return this.set_timer();
    };

    Tick.prototype.set_timer = function() {
      if (this.running) {
        return this.timer = setTimeout((function(_this) {
          return function() {
            return _this.tick();
          };
        })(this), this.options.delay);
      }
    };


    /*
      Events
     */

    Tick.prototype.tick = function() {
      this.value = this.increment(this.value);
      this.render();
      return this.set_timer();
    };


    /*
      Controls for the ticker
     */

    Tick.prototype.start = function() {
      this.element.empty();
      this.render();
      this.running = true;
      return this.set_timer();
    };

    Tick.prototype.stop = function() {
      clearTimeout(this.timer);
      return this.running = false;
    };

    return Tick;

  })();


  /*
    CSS3 Transforms browser support:
    https://developer.mozilla.org/en/CSS/transform#Browser_compatibility
   */

  Tick_Flip = (function(superClass) {
    extend(Tick_Flip, superClass);

    function Tick_Flip() {
      this.lower = bind(this.lower, this);
      return Tick_Flip.__super__.constructor.apply(this, arguments);
    }

    Tick_Flip.prototype.build_container = function(i) {
      var val;
      val = String(this.value).split('')[i];
      return $("<span class='tick-wrapper'> <span class='tick-old'>" + val + "</span> <span class='tick-old-move'>" + val + "</span> <span class='tick-new'></span> <span class='tick-new-move'>" + val + "</span> </span>").appendTo(this.element);
    };

    Tick_Flip.prototype.flip = function(target, digit, scale, duration, onComplete) {
      target.css({
        borderSpacing: 100
      });
      return target.stop(true, true).addClass('tick-moving').animate({
        borderSpacing: 0
      }, {
        duration: duration,
        easing: 'easeInCubic',
        step: (function(_this) {
          return function(now, fx) {
            var val;
            val = scale(now);
            return target.css({
              '-webkit-transform': "scaleY(" + val + ")",
              '-moz-transform': "scaleY(" + val + ")",
              '-ms-transform': "scaleY(" + val + ")",
              '-o-transform': "scaleY(" + val + ")",
              'transform': "scaleY(" + val + ")"
            });
          };
        })(this),
        complete: (function(_this) {
          return function() {
            target.html(digit).css({
              borderSpacing: '',
              '-webkit-transform': '',
              '-moz-transform': '',
              '-ms-transform': '',
              '-o-transform': '',
              'transform': ''
            }).removeClass('tick-moving');
            return onComplete();
          };
        })(this)
      });
    };

    Tick_Flip.prototype.upper = function(now) {
      return now / 100;
    };

    Tick_Flip.prototype.lower = function(now) {
      return 1 - this.upper(now);
    };

    Tick_Flip.prototype.update_container = function(container, digit) {
      var parts;
      parts = $(container).children();
      if (this.running && parts.eq(2).html() !== digit) {
        this.flip(parts.eq(1), digit, this.upper, this.options.delay / 4, function() {});
        this.flip(parts.eq(3).html(digit), digit, this.lower, this.options.delay / 3, function() {
          return parts.eq(0).html(digit);
        });
      }
      return parts.eq(2).html(digit);
    };

    return Tick_Flip;

  })(Tick);

  Tick_Scroll = (function(superClass) {
    extend(Tick_Scroll, superClass);

    function Tick_Scroll() {
      return Tick_Scroll.__super__.constructor.apply(this, arguments);
    }

    Tick_Scroll.prototype.build_container = function(i) {
      return $('<span class="tick-separator-placeholder">.</span><span class="tick-wheel"><span>0</span><span>1</span><span>2</span><span>3</span><span>4</span><span>5</span><span>6</span><span>7</span><span>8</span><span>9</span></span>').appendTo(this.element);
    };

    Tick_Scroll.prototype.render = function() {
      var _nondigits_count, containers, digits, i, j, k, l, m, n, ref, ref1, ref2, ref3, ref4, results, separator_position;
      if (!this.value) {
        return;
      }
      digits = String(this.value).split('');
      containers = this.element.children(':not(.tick-separator-placeholder)');
      _nondigits_count = 0;
      separator_position = -1;
      for (i = j = 0, ref = digits.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        if (!Number.isInteger(digits[i] / 1)) {
          ++_nondigits_count;
          separator_position = digits.length - i - 1;
        }
      }
      if (digits.length > containers.length + _nondigits_count) {
        for (i = l = 0, ref1 = digits.length - _nondigits_count - containers.length; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
          containers.push(this.build_container(i));
        }
      } else if (digits.length < containers.length + _nondigits_count) {
        for (i = m = ref2 = digits.length - _nondigits_count, ref3 = containers.length; ref2 <= ref3 ? m < ref3 : m > ref3; i = ref2 <= ref3 ? ++m : --m) {
          this.element.children('.tick-separator-placeholder').last().remove();
          this.element.children('.tick-wheel').last().remove();
        }
      }
      this.update_separator_position(separator_position, this.element.parent().find('.zero-mask').children('.tick-separator-scroll'));
      i = 0;
      results = [];
      for (k = n = 0, ref4 = containers.length + _nondigits_count; 0 <= ref4 ? n < ref4 : n > ref4; k = 0 <= ref4 ? ++n : --n) {
        if (Number.isInteger(digits[k] / 1)) {
          this.update_container(containers[i], digits[k]);
          results.push(++i);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Tick_Scroll.prototype.update_container = function(container, digit) {
      var elementHeight;
      elementHeight = $(container).children().first().outerHeight(true);
      if (this.running) {
        return $(container).animate({
          top: digit * -elementHeight
        }, this.options.delay);
      } else {
        return $(container).css({
          top: digit * -elementHeight
        });
      }
    };

    Tick_Scroll.prototype.update_separator_position = function(position, separators) {
      var i, j, ref;
      for (i = j = 0, ref = separators.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        $(separators[i]).removeClass("tick-separator-active");
      }
      return $(separators[separators.length - position]).addClass("tick-separator-active");
    };

    Tick_Scroll.prototype.ticktest = function(value, shouldempty) {
      if (shouldempty) {
        this.element.empty();
      }
      this.value = value;
      this.running = true;
      return this.render();
    };

    return Tick_Scroll;

  })(Tick);

}).call(this);
